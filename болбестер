How do you achieve this?
Start by mapping your strengths and weaknesses as a tester, then decide what areas do you want to develop (that will also be valuable to your Organization), and finally look for the means available to you to develop these skills.


Процессы. Чтобы успешно пройти собеседование в Яндекс, не обязательно быть опытным тестировщиком. Главное — способность и желание разбираться в том, как это должно работать и как работает сейчас. Мы рассчитываем, что вы знаете различие между QC и QA, понимаете, в какой момент лучше приступать к тестированию и на что влияет тестировщик. Не лишними будут знания о процессе разработки программного обеспечения и существующих методологиях. Кроме того, если вы обладаете достаточным опытом, на собеседовании вам могут предложить самостоятельно спланировать процесс тестирования системы.


последний вопрос: у вас написано в требования тест-аутомейшн:
через три месяца, к примеру как вы будете судить, хорош ли я в автоматизации?
вот джава, пхп: вот что я должен написать на джаве, пхп и тд через три месяца?

вопрос №1 какое у вас определение идеального кандидата?

последний вопрос: у вас написано в требования тест-аутомейшн:
через три месяца, к примеру как вы будете судить, хорош ли я в автоматизации?
вот джава, пхп: вот что я должен написать на джаве, пхп и тд через три месяца?


правила продаж:
для того чтобы себя впарить, очень важно у тех люде йс которыми вы общаетесь найти боль в прошлом или будущем.
а ты знаешь икс?
послушайте, я много чего знаю и много чего не знаю но есть одна очень важная вещь которую вы должны понимать обо мне: все что я не знаю и все что нужно для дела я буду знать с такой скоростью, что вы еще никогда не видели чтобы люди с такой скоростью это подхватывали с какой подхватываю я и это говорю не потому что там что-то а потому что всегда таким был и всегда это делал и в себе у меня сомнений нет.

кроме "да я вот не знаю, выучу"хуйня кароч.




- Сколько человек в команде, сколько разработчиков/тестеров, кто продуктовнер?
- Какая методология разработки на проекте? Как часто релизы?
- Какой график? Приходится ли перерабатывать? Есть какая-то система штрафов?
- Белая / серая зп?
- Как оборудовано рабочее место, где я буду сидеть? (в последнее время на этом моменте меня приглашают прогуляться по офису и познакомиться с командой, если они еще на рабочем месте)
- Кого вы действительно ищете, какие будут задачи у нанятого человека
- Критерии и срок завершения ИС (если контора серая)

Для ui на яве selenium webdriver, оборачивающие библиотеки к нему (selenide или хз, че там на яве). Модель page object. Любая библиотека для юнит-тестирования типа junit. Для сервисов на яве наверное понадобиться знать хотя бы встроенный в язык http-клиент и вообще, как работают сервисы, архитектуры soap, rest. Из тулов - посмотреть soap ui, jmeter для нагрузочного тестирования (отдельная дисциплина специальной олимпиады), возможно, postman просто глянуть. Это то, с чем я сталкивался и слышал от кандидатов на собеседованиях.

Начнём с того, что вкатиться в автоматизацию с соотв. навыками проще — потому что на мануальщиков просто орды войтивайтишников как ты.

Савин — копипаст с Канера, но пойдёт. Но лучше Канера.
Вдоль и поперёк прохуячь protesting .ru
На в3скул курс по html, потом по SQL, потом на codeacademy — курс по SQL (там интересней).
Освой панель разработчика, в хроме тебе нужны будут вкладки elements, console и network.

Попроходи всякие тестики вроде упомянутого выше testingchallenges. thetestingmap. org/index.php
Учиться на кошках для автоматизатора можно тут
the-internet0. herokuapp. com

Обмажься всякими мануалами из гугла junior qa interview и прочими читлистами вроде этого guru99 .com/complete-web-application-testing-checklist.html

Всё, ты готовая макака, дальше или получаешь удвоенную от стартовой зарплату через год и деградируешь годами, или дропаешь, или растёшь в куче разных направлений.

Алсо, я устроился с английским upper-intermediate, Канером и 3х недельными халявными курсами за спиной. Вышки не было и не будет. Но это Украина, хуй знает какие у вас в Великой реалии.


http://quality-lab.ru/rest-api-testing/
http://quality-lab.ru/soap-api-testing/
http://software-testing.ru/library/testing/testing-tools/2638-postman

Там вода, но есть примеры апи без регистраций и запросов к ним, советую просто поиграться с ними, потом найти другие апи.






Представь у тебя есть какое-то приложение, например сайт почты. На сайте есть отслеживание посылок по треку. Ты пилишь свое приложение на андроид которое тоже может отслеживать посылки. Для этого твое приложение должно работать с сервером почты, согласен? Но откуда ты знаешь как твой клиент должен работать с их сервером? Вот для этого и есть АПИ. Ты октрываешь документацию и видишь: ага, вот такие методы я могу вызывать, вот такие запросы делать и тд. API определяет функциональность, которую предоставляет сервер. Понел? 

https://devcenter.novaposhta.ua/start




так ты только вкатываешся? варианты дальнейших действий многократно тут обсуждали, примерно следующее рекомендую:
для начала определись с направлением (изучать все подряд на этом уровне значит не знать толком ничего) - это веб, десктоп или мобилки (исходим из того что ты будешь заниматься РФТ). Можно сюда добавить и бекэнд как отдельный класс но работать чисто с веб-сервисами тебе вряд ли придется в начале твоего пути, однако отметь к ознакомлению.
как определишься со специализацией ищи материалы и изучай все по этой теме - как это устроено, как и с помощью чего делается, начинай осваивать (хотя бы попробуй) языки которые используются в данной сфере, инструменты, как это и с помощью чего тестируют и тд.
параллельно изучай теорию тестирования (информации достаточно в инете на эту тему, ищи), силабус и материалы по istqb foundation level научат тебя говорить и интерпретировать отраслевые термины так как принято, так что все верно делаешь что читаешь это.
ознакомься с системами с которыми в любом случае придется столкнуться в работе - это системы контроля версий (тот же гит), системы отслеживания ошибок (jira, redmine), системы управления тестами (testlink) и тд., научись использовать виртуальные машины, удаленный доступ и консоль.
изучай ОС хотя бы что бы уверенно себя чувствовать (на базе никсов особенно - если будешь заниматься вебом или беком то столкнешься с этим). Ну и практика, практика, практика - пробуй искать дефекты, смотри как они оформляются и пробуй так же.

Почитай логи))) 
запусти adb logcat, урони какоенить приложение 
найди где упало и попытайся понять изза чего.
Напиши ченить для аппиума/селениума так чтобы нихуя не работало, а потом фикси. 

>Что можешь посоветовать почитать чтобы подготовиться к собесу?

Гуглишь название компании, смотришь насколько большой штат, если больше 20 челов, то там точно есть эйчар.
Читаешь как быть милахой и отлизать у телки взглядом, после прохождения этого этапа нужно будет доказать лиду или кто там у тебя по тех части будет, что ты обучаемый ровно настолько, насколько это вообще возможно.
Ну и то что ты про ойти не вчера узнал. 

Чтобы не проебаться на тех собесе узнай какие проекты у этой компании.
Если вебом занимаются, гуглишь как тестить api, как юзать postman, смотришь что такое xhr и как вообще интернеты работают. Желательно знать про html css чутка хотя бы, если есть знание sql тоже плюс. 

Потом желательно узнать как вообще автоматизация веба реализуется, хотя бы в общих чертах чтобы когда у тебя спрашивали про фреймворк какой или архитектуру построения тестов ты не потупив ебалом мотал головой.

Еще многих цепляет если гворишь что умеешь в тестирование безопасности, предварительно тебе нужно почитать про XSS, XSRF, CSRF, всякие иньекции (php,sql,ssl и т.д), но это к сожалению не за один вечер учится, это так на будущее.


Если десктоп или игоры какие, то это скучно пиздец не буду писать ничего даже кхтьфу


Примерный список(сам у джунов спрашиваю весьма опционально, да и в целом по моему опыту, придётся переучивать)
Интернеты как работают, как загружается страница, здесь же можно про хттп, модель ОСИ
Консоль разработчика бравузерная, что там есть 
Тестовые артефакты(планы, кейсы, сьюты...)
Виды/типы тестирования
Эквивалентности, граничные значения
Важность/приоритет, в чем разница
Валидация/верификация
ЖЦ ПО, жц бага(вопрос говно, но многие спрашивают)
*никс системы
скв(зачем оно)
селениум(вообще зачем и что это)
И могут спросить что-нибудь из разряда:
Как оценить покрытие кейсами какой-то фичи
Сколько кейсов оптимально и почему
Если на первом кейсе словил критикал, что делать и т.п.

////


берешь любой сайт/шаблон сайта, ченить типо интернет магазина, ставишь локально и делаешь проверки на основную бизнес логику, потом на всякие минорные вещи, типо берешь атрибут кнопки и сравниваешь что там цвет #FFF например ну или какой он там будет у нее, сравниваешь всякие балансы кошелька

бля просто гугл протести, там миллион сценариев можно напридумывать, любая хуйня что в голову придет то и проверяй

Сразу свой говнофреймворк пиши изучая параллельно дизайн паттерны, когда будет уже нормально так тестов разных с хуевой тучей проверок и сложнопонятной архитектурой посмотри в сторону селенида, пойми что твой фреймворк говно но ты дальше пиши, при этом подключив селенид и рефактори свою хуйню

В процессе еще и язык заебись подтянешь на котором пишешь, если это канеш не пыха. Пыха как известно для даунов и нормально с ней не потестишь 

Платные курсы по программированию - это как платные видео по фитнесу. Ты можешь купить их сколько угодно, но суть проста: ты или занимаешься или нет. Занимаешься регулярно, каждый день, или через день (зависит от программы и целей), занимаешься даже если "нет прогресса" или у тебя "плохая генетика", просто идёшь и занимаешься и через 2 месяца или через 2 года (действительно, зависит от генетики) результат будет. А от просмотра видео результата не будет.

>Взываю к анонам познавшим суть информационной диеты и не сорвавшимся. Сколько вообще времени позволяете себе на серфинг с развлекательной целью? 
В день, когда работаю - ноль. Информационная зависимость - это как героин. Практически невозможно "колоться по выходным". Я четко знаю, что если на перерыве в 11 часов утра я зайду на медузу, то очнусь в 17:30 на ютубе, смотря видос Фейнмана про магниты.

Серфинг намного опаснее компьютерных игр. Залипать в играх бесконечно ты не будешь. В доту ты гамзанешь 2 раза и в тильте ливнешь с игры, когда тебе закинут токсичных руинеров. В нетике можно зависать часами и днями.

Третий минус в том, что зависая на том же хабре можно делать вид, что ты не так уж и впустую тратишь время, все-таки ты получаешь какую-то полезную инфу, хотя на самом деле - это пшик, это по сути такие же копирайтерские статейки, просто о проганье.

Поэтому серфить я вообще перестал. Тупо слишком затягивает. Ничего не могу с собой сделать.

ч
